# -*- coding: utf-8 -*-
"""cQuant.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iza62SgGNWhd5xsP2FeBjsBgKrQDa9jD

## **cQaunt.io**
"""

#Import libraries:
import io
from google.colab import files
import pandas as pd
import random
import numpy as np
from datetime import datetime
from pandas import read_csv
from matplotlib import pyplot as plt
import statistics

"""**Task 1: Read in all files and stack them**"""

#Upload files from desktop:
data = files.upload()

#Read in files and keep first column as timestamp:
df_2016 = pd.read_csv(io.BytesIO(data['ERCOT_DA_Prices_2016.csv']), index_col=0, parse_dates=True)
df_2017 = pd.read_csv(io.BytesIO(data['ERCOT_DA_Prices_2017.csv']), index_col=0, parse_dates=True)
df_2018 = pd.read_csv(io.BytesIO(data['ERCOT_DA_Prices_2018.csv']), index_col=0, parse_dates=True)
df_2019 = pd.read_csv(io.BytesIO(data['ERCOT_DA_Prices_2019.csv']), index_col=0, parse_dates=True)

#Stack all files into one dataframe. The dataframe is called df_all:
df_all = pd.concat([df_2016,df_2017,df_2018,df_2019],ignore_index=False)

"""**Task 2: Compute averages**"""

#Monthly averages by SettlementPoints:
df_all_monthly = df_all.groupby('SettlementPoint').resample('M')['Price'].mean()

"""**Task 3: Insert columns Year and Month and drop column Date and download as .cvs**"""

df_all_monthly = pd.DataFrame(data=df_all_monthly)
df_all_monthly = df_all_monthly.reset_index( level = [1] )

# extract the day, month, and year components:
df_all_monthly['Date'] = pd.to_datetime(df_all_monthly['Date'])
df_all_monthly['Year'] = df_all_monthly['Date'].dt.year
df_all_monthly['Month'] = df_all_monthly['Date'].dt.month

df_all_monthly = pd.DataFrame(data=df_all_monthly)
df_all_monthly.columns = ["Date","AveragePrice","Year","Month"]

#drop 'Date' column and save file as .csv:

df_all_monthly = df_all_monthly.drop('Date', axis=1)
df_all_monthly.to_csv('AveragePriceByMonth.csv')

"""**Task 4: Calculate volatility**"""

#First: Filter out all SettlementPoints that start with 'HB_' and where Price > 0:
df_all_filtered=df_all
df_all_filtered = df_all_filtered[(df_all_filtered.SettlementPoint.str.startswith('HB_'))&(df_all_filtered.Price>0)]

#Second: In order to calculate the log returns, the dataframe has to be sorted the right way.
# One way to do so is to insert a couple of additional columns: Year, Month, Day, Hour:
df_all_log_return=df_all_filtered
df_all_log_return
df_all_log_return['Year'] = df_all_log_return.index.year
df_all_log_return['Month'] = df_all_log_return.index.month
df_all_log_return['Day'] = df_all_log_return.index.day
df_all_log_return['Hour'] = df_all_log_return.index.hour

#Sort data by 1. SettlementPoint, 2. Year, 3. Month, 4. Day, 5. Hour to get the right order:
df_all_log_return.reset_index(drop=True)
df_all_log_return = df_all_log_return.sort_values(['SettlementPoint', 'Year','Month','Day','Hour'])

#Calculate log returns:
df_all_log_return['Log Return'] = np.log(df_all_log_return['Price']/df_all_log_return['Price'].shift(1))
df_all_log_return

#In order to calculate the Volatility (Standard Deviation) the data needs to be grouped by SettlementPoint and Year.
#When that's done, the Standard Deviation of the Log Returns can be calculated. The function looks like this:
df_volatility=df_all_log_return.groupby(['SettlementPoint','Year'])['Log Return'].std()

#Name the third column as "HourlyVolatility". Here we wanted the hourly volatility and it would be easy to get the annual vola by multiplying the hourly vola by sqrt(252) if 252 trading days.
df_volatility = pd.DataFrame(df_volatility)
df_volatility.columns = ["HourlyVolatility"]

"""**Task 5: Save hourly vola data to 'HourlyVolatilityByYear.csv'**"""

#save data to .csv
df_volatility.to_csv('HourlyVolatilityByYear.csv')

"""**Task 6: Highest SettlementPoint Vola per Year**"""

#Max Volatility for each SettlementPoint:
df_max_volatility=df_volatility.loc[df_volatility.groupby(["Year"])['HourlyVolatility'].apply(lambda x: x == x.max())]

#save data to .csv
df_max_volatility.to_csv('MaxVolatilityByYear.csv')



